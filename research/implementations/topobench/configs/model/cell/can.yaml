_target_: topobench.model.TBModel

model_name: can
model_domain: cell

feature_encoder:
  _target_: topobench.nn.encoders.${model.feature_encoder.encoder_name}
  encoder_name: AllCellFeatureEncoder
  in_channels: ${infer_in_channels:${dataset},${oc.select:transforms,null}} 
  out_channels: 128
  proj_dropout: 0.0
  selected_dimensions:
    - 0
    - 1

backbone:
  _target_: topomodelx.nn.cell.can.CAN
  in_channels_0: ${model.feature_encoder.out_channels}
  in_channels_1: ${model.feature_encoder.out_channels}
  out_channels: ${model.feature_encoder.out_channels}
  dropout: 0.0
  heads: 1 # For now we stuck to out_channels//heads, keep heads = 1 
  concat: True
  skip_connection: True
  n_layers: 1
  att_lift: False

backbone_wrapper:
  _target_: topobench.nn.wrappers.CANWrapper
  _partial_: true
  wrapper_name: CANWrapper
  out_channels: ${model.feature_encoder.out_channels}
  num_cell_dimensions: ${infer_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}}

readout:
  _target_: topobench.nn.readouts.${model.readout.readout_name}
  readout_name: PropagateSignalDown #  Use <NoReadOut> in case readout is not needed Options: PropagateSignalDown
  num_cell_dimensions: ${infer_num_cell_dimensions:${oc.select:model.feature_encoder.selected_dimensions,null},${model.feature_encoder.in_channels}} # The highest order of cell dimensions to consider
  hidden_dim: ${model.feature_encoder.out_channels}
  out_channels: ${dataset.parameters.num_classes}
  task_level: ${dataset.parameters.task_level}
  pooling_type: sum

# compile model for faster training with pytorch 2.0
compile: false
