name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      run_staircase:
        description: "Run large staircase probe (slow; use only on demand)"
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  TDA_ARTIFACT_DIR: /tmp/tda-artifacts

jobs:
  cpp-tests:
    name: C++ Build & Streaming Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build \
            libeigen3-dev libgmp-dev libmpfr-dev libtbb-dev python3

      - name: Prepare artifact directory
        run: mkdir -p "$TDA_ARTIFACT_DIR"

      - name: Configure (Release)
        run: |
          cmake -S . -B build/release \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=ON \
            -DBUILD_BENCHMARKS=ON \
            -DBUILD_PYTHON=OFF

      - name: Build
        run: cmake --build build/release --config Release -- -j"$(nproc)"

      - name: Run targeted C++ tests (PerfBaselineJSONL + PerfMonotonicity)
        run: |
          ctest --test-dir build/release -R "(PerfBaselineJSONL|PerfMonotonicity)" --output-on-failure --timeout 180

      - name: List JSONL metrics (info only)
        if: always()
        run: |
          echo "Scanning $TDA_ARTIFACT_DIR for JSONL outputs..." || true
          ls -la "$TDA_ARTIFACT_DIR" || true
          echo "Sample telemetry lines (if present):" || true
          grep -E '"(mode|dm_blocks|dm_edges|simplices|softcap_overshoot|dm_peakMB|rss_peakMB)"' -n "$TDA_ARTIFACT_DIR"/*.jsonl || true

      - name: Upload streaming test artifacts
        if: always()
        uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3.2.1
        with:
          name: cpp-streaming-artifacts
          path: ${{ env.TDA_ARTIFACT_DIR }}

      - name: Gate artifacts with analyzer (overshoot==0, memory fields present)
        if: always()
        run: |
          python3 scripts/analyze_performance_logs.py --artifacts "$TDA_ARTIFACT_DIR" --gate --require-csv

  cpp-perf-probe:
    name: C++ Perf Probe (adjacency hist + telemetry)
    runs-on: ubuntu-latest
    needs: cpp-tests
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build \
            libeigen3-dev libgmp-dev libmpfr-dev libtbb-dev python3

      - name: Prepare artifact directory
        run: mkdir -p "$TDA_ARTIFACT_DIR"

      - name: Configure (Release)
        run: |
          cmake -S . -B build/release \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=ON \
            -DBUILD_BENCHMARKS=ON \
            -DBUILD_PYTHON=OFF

      - name: Build harness
        run: cmake --build build/release --config Release --target test_streaming_cech_perf -- -j"$(nproc)"

      - name: Run Phase 1 validation script (end-to-end)
        run: |
          chmod +x scripts/run_performance_validation.sh
          scripts/run_performance_validation.sh \
            --harness build/release/tests/cpp/test_streaming_cech_perf \
            --artifacts "$TDA_ARTIFACT_DIR"

      - name: Quick overshoot/memory check (non-blocking)
        if: always()
        run: |
          echo "Telemetry summary:" || true
          grep -E 'softcap_overshoot|dm_peakMB|rss_peakMB' -n "$TDA_ARTIFACT_DIR"/*.jsonl || true

      - name: Upload perf probe artifacts
        if: always()
        uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3.2.1
        with:
          name: cpp-perf-probe-artifacts
          path: ${{ env.TDA_ARTIFACT_DIR }}

  cpp-accuracy-check:
    name: C++ Accuracy Check (small-n exact vs soft-cap)
    runs-on: ubuntu-latest
    needs: cpp-tests
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build \
            libeigen3-dev libgmp-dev libmpfr-dev libtbb-dev python3

      - name: Prepare artifact directory
        run: mkdir -p "$TDA_ARTIFACT_DIR"

      - name: Configure (Release)
        run: |
          cmake -S . -B build/release \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=ON \
            -DBUILD_BENCHMARKS=ON \
            -DBUILD_PYTHON=OFF

      - name: Build harness
        run: cmake --build build/release --config Release --target test_streaming_cech_perf -- -j"$(nproc)"

      - name: Run accuracy check (N=4000, K=8,16,32)
        run: |
          chmod +x scripts/run_accuracy_check.sh
          scripts/run_accuracy_check.sh \
            --harness build/release/tests/cpp/test_streaming_cech_perf \
            --artifacts "$TDA_ARTIFACT_DIR" \
            --n 4000 --d 8 --radius 0.5 --maxDim 1 --klist "8,16,32"

      - name: Upload accuracy artifacts
        if: always()
        uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3.2.1
        with:
          name: cpp-accuracy-artifacts
          path: ${{ env.TDA_ARTIFACT_DIR }}

      - name: Analyze accuracy report (gated)
        if: always()
        run: |
          python3 scripts/analyze_performance_logs.py \
            --artifacts "$TDA_ARTIFACT_DIR" \
            --accuracy-edges-pct-threshold 5.0 \
            --accuracy-h1-pct-threshold 5.0 \
            --accuracy-gate --gate

  cpp-staircase:
    name: C++ Staircase Probe (200K on-demand)
    runs-on: ubuntu-latest
    needs: cpp-tests
    timeout-minutes: 25
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_staircase == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ninja-build \
            libeigen3-dev libgmp-dev libmpfr-dev libtbb-dev python3

      - name: Prepare artifact directory
        run: mkdir -p "$TDA_ARTIFACT_DIR"

      - name: Configure (Release)
        run: |
          cmake -S . -B build/release \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=ON \
            -DBUILD_BENCHMARKS=ON \
            -DBUILD_PYTHON=OFF

      - name: Build harness
        run: cmake --build build/release --config Release --target test_streaming_cech_perf -- -j"$(nproc)"

      - name: Run staircase probe (n=200000)
        run: |
          chmod +x scripts/run_performance_validation.sh
          scripts/run_performance_validation.sh \
            --harness build/release/tests/cpp/test_streaming_cech_perf \
            --artifacts "$TDA_ARTIFACT_DIR" \
            --staircase "200000"

      - name: Upload staircase artifacts
        if: always()
        uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3.2.1
        with:
          name: cpp-staircase-artifacts
          path: ${{ env.TDA_ARTIFACT_DIR }}
  # Optional: enable accuracy gating if reports are produced in staircase context
  # - name: Accuracy gate (optional)
  #   if: always()
  #   run: |
  #     python3 scripts/analyze_performance_logs.py \
  #       --artifacts "$TDA_ARTIFACT_DIR" \
  #       --accuracy-edges-pct-threshold 5.0 \
  #       --accuracy-h1-pct-threshold 5.0 \
  #       --accuracy-gate --gate