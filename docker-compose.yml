# TDA Platform Docker Compose Configuration
version: '3.8'

services:
  # Main TDA Platform API Server
  tda-api:
    build:
      context: .
      target: production
    container_name: tda-platform-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - ./outputs:/app/outputs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Background Worker for Heavy TDA Computations
  tda-worker:
    build:
      context: .
      target: production
    container_name: tda-platform-worker
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - WORKER_TYPE=tda_computation
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
      - ./outputs:/app/outputs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: ["python", "-m", "src.workers.tda_worker"]
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tda-platform-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
# Ports removed for security - database only accessible within Docker network
    # ports:
    #   - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Job Queue
  redis:
    image: redis:7-alpine
    container_name: tda-platform-redis
# Ports removed for security - Redis only accessible within Docker network  
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}

  # Monitoring and Metrics (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: tda-platform-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tda-platform-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  # Development Services
  jupyter:
    build:
      context: .
      target: development
    container_name: tda-platform-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - .:/app
      - jupyter_data:/home/tda/.jupyter
    profiles:
      - dev
    restart: unless-stopped

  # Testing Service
  test-runner:
    build:
      context: .
      target: testing
    container_name: tda-platform-tests
    volumes:
      - .:/app
      - test_reports:/app/test-reports
    profiles:
      - test
    command: ["python", "-m", "pytest", "tests/", "-v", "--cov=src", "--cov-report=html:/app/test-reports/coverage"]

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  jupyter_data:
  test_reports:

networks:
  default:
    name: tda-platform-network